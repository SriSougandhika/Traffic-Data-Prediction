# -*- coding: utf-8 -*-
"""FinalMLAssg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kWWATpy7eke33uV6Fl_BuVGzX7LyZ1xX
"""

import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt

"""Import the Dataset"""

from google.colab import files
uploaded = files.upload()

df = pd.read_excel('mldata (1).xlsx')
df

type(df['day'][0])

"""Check for the correlation among the quantities flow, speed and occupancy"""

step = 1
pres = df[['speed','occupancy','flow']][0:-(step)].reset_index(drop=True)
future = df[['speed','occupancy','flow']][step:] \
    .reset_index(drop=True) \
    .add_suffix('_future')
val = pres.join(future)
val.corr()

df['speed'][:500].plot()

df['occupancy'][:500].plot()

df['flow'][:500].plot()

"""A correlation of 0.7 to 0.9: is a strong positive correlation. This means that there is a strong positive relationship between the two variables being measured. In other words, as the value of one variable increases, the value of the other variable also tends to increase.

Set the x and y arrays
"""

import numpy as np
#let inputs be speed and flow, and we will predict the occupancy
x=np.array(df[['speed','flow']])
y=np.array(df['occupancy'])

"""Perform the train test split:"""

#traintest data split:
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x,y,test_size=0.3)
print(xtrain.shape,ytrain.shape)
print(xtest.shape,ytest.shape)

"""Scale the data using the minmaxscaler.
Also reshape the data inorder to give input to the model
"""

#scaling data using minmaxscaler:
from sklearn.preprocessing import MinMaxScaler
scX=MinMaxScaler()
scY=MinMaxScaler()
xtrain=scX.fit_transform(xtrain)
xtest=scX.fit_transform(xtest)
ytrain=scY.fit_transform(ytrain.reshape(-1,1))
ytest=scY.fit_transform(ytest.reshape(-1,1))
xtrain=np.expand_dims(xtrain,-1)
ytrain=np.expand_dims(ytrain,-1)
print(xtrain.shape,ytrain.shape)
print(xtest.shape,ytest.shape)

"""Now build the model. I have use the simplernn model from tensorflow."""

#building the model using functional api:
from tensorflow.keras.layers import Input, Dense, Dropout, SimpleRNN, LSTM
from tensorflow.keras.models import Model
model = tf.keras.Sequential()
model.add(SimpleRNN(16, activation='relu'))
#model.add(Dropout(0.1))
model.add(Dense(16))
model.compile(loss='mse', optimizer='adam')
r = model.fit(xtrain, ytrain, epochs=100, validation_split=0.3)

"""As we plot the loss, it is quite lower than before."""

plt.plot(r.history['loss'])
plt.plot(r.history['val_loss'])

"""Now we perform predicition for ytrain data, and plot it again the original ytrain data."""

pred1 = model.predict(xtrain)

ytrain=ytrain.reshape(1278,1)
pred1.shape

plt.plot(pred1[:,0], label='prediction')
plt.plot(ytrain, label='target')
plt.legend()

"""As we can see from above the predictions look quite good. Now we do the same for the xtest."""

xtest.shape

xtest=np.expand_dims(xtest,-1)
#
xtest.shape

pred2 = model.predict(xtest)
plt.plot(pred2[:,0], label='prediction')
plt.plot(ytest, label='target')
plt.legend()

"""The prediction for xtest of same data is also good. Now let us confirm it with our metrics: RMSE and R2 score"""

model_RMSE = np.sqrt(np.mean((ytest - pred2[:,0]) ** 2))
print(model_RMSE)

"""RMSE for test data is quite low, which is good sign."""

model_RMSE = np.sqrt(np.mean((ytrain - pred1[:,0]) ** 2))
print(model_RMSE)

"""RMSE for train data is also low, indicating that the model has learned the pattern.

R2 SCORE:
"""

from sklearn.metrics import r2_score
r2_score(ytrain,pred1[:,0])

"""R2 score for test data is 83.27% which is accurate enough."""

from sklearn.metrics import r2_score
r2_score(ytest,pred2[:,0])

"""R2 score for test data is 78.01% which is quite a good metrics value.

UNSEEN DATA PREDICTION:

We have used the data for the time period of january 2018 to january 2023.
Let us try using our model to check the prediction for february month.
"""

#forecast for unseen data:
from google.colab import files
uploaded = files.upload()

df2=pd.read_excel('forecast.xlsx')
df2.head()

nx=np.array(df2[['speed','flow']])
ny=np.array(df2[['occ']])

#scaling:
nx = scX.fit_transform(nx)
ny = scY.fit_transform(ny)
nx.shape

nx=np.expand_dims(nx,-1)
npred=model.predict(nx)

npred.shape

plt.plot(npred[:,0], label='prediction')
plt.plot(ny, label='target')
plt.legend()

"""As we plot the prediction against the actual values we see that our model has captured the data's pattern quite good and we can see that the error between prediction and target values is very less.

Even the r2 score is above 78%.
"""

print('RMSE:',np.sqrt(np.mean((ny - npred[:,0]) ** 2)))
print('R2 Score:',r2_score(ny,npred[:,0]))